<div class="page-width">
  <div id="{{ section.id }}" class="recent-viewed">
    <div class="recent-viewed__heading flex flex-row justify-between items-center md:mb-5 mb-8">
      <div class="heading__title text-gray-900 font-semibold text-[28px]">
        {{ section.settings['recent-viewed__title'] }}
      </div>
    </div>
    <div
      class="swiper recent-viewed__slider h-[400px] md:h-[300px] !p-[6px] md:!p-[24px] md:pb-20 pb-40!"
      data-desktop="{{ section.settings.products-per-slide-desktop }}"
      data-mobile="{{ section.settings.products-per-slide-mobile }}"
    >
      <div class="recent-viewed__container swiper-wrapper"></div>
      <div class="swiper-button-prev left-0 bg-gray-100 rounded-full after:text-gray-700"></div>
      <div class="swiper-button-next right-0 bg-gray-100 rounded-full after:text-gray-700"></div>
    </div>
  </div>
</div>
<script async>
  document.addEventListener('DOMContentLoaded', function () {
    const sliderEl = document.querySelector('.recent-viewed__slider');
    if (sliderEl && typeof Swiper !== 'undefined') {
      new Swiper(sliderEl, {
        slidesPerView: parseInt(sliderEl.dataset.desktop) || 4,
        spaceBetween: 24,
        navigation: {
          nextEl: '.swiper-button-next',
          prevEl: '.swiper-button-prev',
        },
        breakpoints: {
          0: {
            slidesPerView: parseInt(sliderEl.dataset.mobile) || 2,
          },
          768: {
            slidesPerView: parseInt(sliderEl.dataset.desktop) || 4,
          },
        },
        loop: true,
      });
    }
  });
</script>
<style>
  .recent-viewed {
    margin: 56px 0;
  }

  .recent-viewed__container .swatch {
    width: 16px;
  }

  .swiper-button-prev,
  .swiper-button-next {
    display: flex !important;
    width: 40px;
    height: 40px;
    align-items: center;
    justify-content: center;
    top: 38%;
  }

  .swiper-button-prev::after,
  .swiper-button-next::after {
    font-size: 16px;
  }

  .swiper-button-prev {
    left: 0;
  }

  .swiper-button-next {
    right: 0;
  }

  @media (max-width: 768px) {
    .swiper-button-prev {
      top: calc(100% - 30px);
      left: 38% !important;
    }

    .swiper-button-next {
      top: calc(100% - 30px);
      right: 38% !important;
    }
  }
</style>
<script>
  document.addEventListener('DOMContentLoaded', function () {

  if (window.Shopify && window.Shopify.designMode) {
    // In theme editor - skip or show placeholder
    const container = document.querySelector('.recent-viewed__container');
    container.innerHTML = '<p class="p-4">Recently viewed products are not available in theme editor preview.</p>';
    return;
  }
    const container = document.querySelector('.recent-viewed__container');
    const sliderEl = document.querySelector('.recent-viewed__slider');
    let viewed = JSON.parse(localStorage.getItem('viewed_products') || '[]');

    viewed = viewed.slice(1, 9);
    if (viewed.length === 0) {
      container.innerHTML = '<p class="p-4">No recently viewed products.</p>';
      return;
    }
    const formatter = new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
    minimumFractionDigits: 2,
    maximumFractionDigits: 2,
    });

    Promise.all(viewed.map((handle) => fetch(`/products/${handle}.js`).then((res) => res.json())))
      .then((products) => {
        container.innerHTML = '';
        products.forEach((product) => {
          console.log(product)
          const slide = document.createElement('div');
          slide.classList.add('swiper-slide');
          const price = formatter.format(product.price);
          const compare_at_price = formatter.format(product.compare_at_price);
          // Build minimal product card HTML (you can customize or use your snippet)
          slide.innerHTML = `
          <div class="product_container product-${product.id} swiper-slide !flex flex-col justify-between min-h-[270px] gap-0">
          <div class="product__image h-[190px] md:h-[150px] relative overflow-hidden group">            
            <a href="${product.url}">
                <img
                class="product-main-image w-full h-full object-cover transition-opacity duration-300 ease-in-out group-hover:opacity-0"
                id="product-image-${product.id}"
                src="${product.images[0]}"
                width="300"
                height="300"
                alt="${product.title}"
                >
                  <img
              class="product-secondary-image absolute top-0 left-0 w-full h-full object-cover opacity-0 transition-opacity duration-300 ease-in-out group-hover:opacity-100"
              src="${product.images[1]}"
              width="300"
              height="300"
              alt="${product.title} secondary image"
              aria-hidden="true"
                >
            </a>
            </div>
            <div class="product__title text-[14px] font-medium text-gray-900">${product.title}</div>
            <div class="product__price text-[16px] font-semibold text-gray-900">${price} 
            <span class=" line-through text-gray-600 text-[12px] font-normal">${compare_at_price}</span>
            </div>
            <div class="product__option flex justify-between items-center">
            <button class="flex-1 bg-gray-800 text-white rounded-2xl px-5 py-2.5 mr-2 border hover:border-gray-900 hover:text-gray-900 hover:bg-gray-100 transition-colors duration-300 cursor-pointer">Add to cart</button>
            <a
            class="bg-gray-100 rounded-full w-[40px] h-[40px] flex justify-center items-center hover:bg-gray-200 transition-colors duration-300 "
            href="#"
            ><img
                src="{{ "icon-heart.svg" |  asset_url }}"
                width="16px"
                height="16px"
                alt="Favorite"
            ></a>
        </div>
        </div>
         `;
          container.appendChild(slide);
        });
        // Initialize Swiper slider once products are rendered
        if (sliderEl && typeof Swiper !== 'undefined') {
          new Swiper(sliderEl, {
            slidesPerView: parseInt(sliderEl.dataset.desktop) || 4,
            spaceBetween: 24,
            navigation: {
              nextEl: '.swiper-button-next',
              prevEl: '.swiper-button-prev',
            },
            breakpoints: {
              0: {
                slidesPerView: parseInt(sliderEl.dataset.mobile) || 2,
              },
              768: {
                slidesPerView: parseInt(sliderEl.dataset.desktop) || 4,
              },
            },
            loop: true,
          });
        }
      })
      .catch((err) => {
        container.innerHTML = '<p class="p-4">Error loading recently viewed products.</p>';
        console.error(err);
      });
  });
</script>
<script>
  (function () {
    var productHandle = '{{ product.handle }}';
    var viewed = JSON.parse(localStorage.getItem('viewed_products') || '[]');

    // Remove if already exists to avoid duplicates
    var index = viewed.indexOf(productHandle);
    if (index !== -1) viewed.splice(index, 1);

    // Add to front
    viewed.unshift(productHandle);

    // Keep only last 20 viewed products (optional)
    viewed = viewed.slice(0, 20);

    localStorage.setItem('viewed_products', JSON.stringify(viewed));
  })();
</script>
{% schema %}
{
  "name": "Recent Viewed",
  "class": "recent-viewed",
  "settings": [
    {
      "type": "text",
      "id": "recent-viewed__title",
      "label": "Title",
      "default": "Recent Viewed"
    },
    {
      "type": "range",
      "id": "products-per-slide-desktop",
      "min": 2,
      "max": 5,
      "step": 1,
      "label": "Products per slide (desktop)",
      "default": 4
    },
    {
      "type": "range",
      "id": "products-per-slide-mobile",
      "min": 1,
      "max": 3,
      "step": 1,
      "label": "Products per slide (mobile)",
      "default": 2
    }
  ],
  "presets": [
    {
      "name": "Recent Viewed Products"
    }
  ]
}
{% endschema %}
