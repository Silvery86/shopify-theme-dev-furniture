<div class="page-width">
  <div id="{{ section.id }}" class="recent-viewed">
    <div class="recent-viewed__heading flex flex-row justify-between items-center md:mb-5 mb-8">
      <div class="heading__title text-gray-900 font-semibold text-[28px]">
        {{ section.settings['recent-viewed__title'] }}
      </div>
    </div>
    <div
      class="swiper recent-viewed__slider h-[400px] md:h-[300px] !p-[6px] md:!p-[24px] md:pb-20 pb-40!"
      data-desktop="{{ section.settings.products-per-slide-desktop }}"
      data-mobile="{{ section.settings.products-per-slide-mobile }}"
    >
      <div class="recent-viewed__container swiper-wrapper"></div>
       <div class="swiper-button-prev left-0 bg-gray-100 rounded-full after:text-gray-700" ></div>
      <div class="swiper-button-next right-0 bg-gray-100 rounded-full after:text-gray-700"></div>
    </div>
  </div>
</div>
<script async>
  document.addEventListener('DOMContentLoaded', function () {
    const sliderEl = document.querySelector('.recent-viewed__slider');
    if (sliderEl && typeof Swiper !== 'undefined') {
      new Swiper(sliderEl, {
        slidesPerView: parseInt(sliderEl.dataset.desktop) || 4,
        spaceBetween: 24,
        navigation: {
          nextEl: '.swiper-button-next',
          prevEl: '.swiper-button-prev',
        },
        breakpoints: {
          0: {
            slidesPerView: parseInt(sliderEl.dataset.mobile) || 2,
          },
          768: {
            slidesPerView: parseInt(sliderEl.dataset.desktop) || 4,
          },
        },
        loop: true,
      });
    }
  });
</script>
<style>
  .recent-viewed {
    margin: 56px 0;
  }

  .recent-viewed__container .swatch {
    width: 16px;
  }

  .swiper-button-prev,
  .swiper-button-next {
    display: flex !important;
    width: 40px;
    height: 40px;
    align-items: center;
    justify-content: center;
    top: 38%;
  }

  .swiper-button-prev::after,
  .swiper-button-next::after {
    font-size: 16px;
  }

  .swiper-button-prev {
    left: 0;
  }

  .swiper-button-next {
    right: 0;
  }

  @media (max-width: 768px) {
    .swiper-button-prev {
      top: calc(100% - 30px);
      left: 38% !important;
    }

    .swiper-button-next {
      top: calc(100% - 30px);
      right: 38% !important;
    }
  }
</style>
<script>
  document.addEventListener('DOMContentLoaded', async function () {
    if (window.Shopify && window.Shopify.designMode) {
      // In theme editor - skip or show placeholder
      const container = document.querySelector('.recent-viewed__container');
      container.innerHTML = '<p class="p-4">Recently viewed products are not available in theme editor preview.</p>';
      return;
    }
    const container = document.querySelector('.recent-viewed__container');
    const sliderEl = document.querySelector('.recent-viewed__slider');
    let viewed = JSON.parse(localStorage.getItem('viewed_products') || '[]');

    viewed = viewed.slice(1, 9);
    if (viewed.length === 0) {
      container.innerHTML = '<p class="p-4">No recently viewed products.</p>';
      return;
    }

    function fetchProductHTML(card_product) {
      return fetch(`/products/${card_product}?sections=custom-product-card`)
        .then((response) => {
          if (!response.ok) {
            throw new Error(`Failed to load product: ${card_product}`);
          }
          return response.json();
        })
        .then((data) => {
          const htmlString = data['custom-product-card'] || '';
          const tempDiv = document.createElement('div');
          tempDiv.innerHTML = htmlString;

          const wrapper = tempDiv.querySelector('#shopify-section-custom-product-card');
          if (wrapper) {
            return wrapper.innerHTML;
          }
          return htmlString;
        })
        .catch((error) => {
          console.error(error);
          return '';
        });
    }

    container.innerHTML = ''; // Clear container before appending

    Promise.all(viewed.map((handle) => fetchProductHTML(handle))).then((productsHTML) => {
      productsHTML.forEach((html) => {
        if (html) {
          container.insertAdjacentHTML('beforeend', html);
        }
      });
      if (sliderEl && typeof Swiper !== 'undefined') {
        new Swiper(sliderEl, {
          slidesPerView: parseInt(sliderEl.dataset.desktop) || 4,
          spaceBetween: 24,
          navigation: {
            nextEl: '.swiper-button-next',
            prevEl: '.swiper-button-prev',
          },
          breakpoints: {
            0: {
              slidesPerView: parseInt(sliderEl.dataset.mobile) || 2,
            },
            768: {
              slidesPerView: parseInt(sliderEl.dataset.desktop) || 4,
            },
          },
          loop: true,
        });
      }
       initializeWishlistToggle();
       initializeQuickAddToCart();
    });
  });
</script>
<script>
  (function () {
    var productHandle = '{{ product.handle }}';
    var viewed = JSON.parse(localStorage.getItem('viewed_products') || '[]');

    // Remove if already exists to avoid duplicates
    var index = viewed.indexOf(productHandle);
    if (index !== -1) viewed.splice(index, 1);

    // Add to front
    viewed.unshift(productHandle);

    // Keep only last 20 viewed products (optional)
    viewed = viewed.slice(0, 20);

    localStorage.setItem('viewed_products', JSON.stringify(viewed));
  })();
</script>
{% schema %}
{
  "name": "Recent Viewed",
  "class": "recent-viewed",
  "settings": [
    {
      "type": "text",
      "id": "recent-viewed__title",
      "label": "Title",
      "default": "Recent Viewed"
    },
    {
      "type": "range",
      "id": "products-per-slide-desktop",
      "min": 2,
      "max": 5,
      "step": 1,
      "label": "Products per slide (desktop)",
      "default": 4
    },
    {
      "type": "range",
      "id": "products-per-slide-mobile",
      "min": 1,
      "max": 3,
      "step": 1,
      "label": "Products per slide (mobile)",
      "default": 2
    }
  ],
  "presets": [
    {
      "name": "Recent Viewed Products"
    }
  ]
}
{% endschema %}
