{{ 'component-product-variant-picker.css' | asset_url | stylesheet_tag }}
{{ 'component-swatch-input.css' | asset_url | stylesheet_tag }}
{{ 'component-swatch.css' | asset_url | stylesheet_tag }}
<div class="page-width">
  <div class="wishlist-container">
    <h1>Wishlist</h1>
    <div class="loading-overlay gradient"></div>
    <ul
      id="product-grid"
      data-id="{{ section.id }}"
      class="grid product-grid grid--2-col-tablet-down grid--4-col-desktop gap-4 md:gap-2 items-end"
    >
      <!-- Product cards will be injected here by JS -->
    </ul>
  </div>
</div>

<style>
  .wishlist-container {
    margin: 36px 0;
  }
  .swatch {
    aspect-ratio: 1/1;
    width: 16px !important;
  }
</style>
<script defer>
  document.addEventListener('DOMContentLoaded', function () {
    if (window.Shopify && window.Shopify.designMode) {
      const container = document.getElementById('product-grid');
      container.innerHTML =
        '<li class="p-4 col-span-full">Wishlist products preview is not available in theme editor</li>';
      return;
    }

    const productGrid = document.getElementById('product-grid');

    // Fetch the product card HTML using Promise-based fetchProductHTML
    function fetchProductHTML(card_product) {
      return fetch(`/products/${card_product}?sections=custom-product-card`)
        .then((response) => {
          if (!response.ok) {
            throw new Error(`Failed to load product: ${card_product}`);
          }
          return response.json();
        })
        .then((data) => {
          const htmlString = data['custom-product-card'] || '';
          const tempDiv = document.createElement('div');
          tempDiv.innerHTML = htmlString;

          const wrapper = tempDiv.querySelector('#shopify-section-custom-product-card');
          if (wrapper) {
            return wrapper.innerHTML;
          }
          return htmlString;
        })
        .catch((error) => {
          console.error(error);
          return '';
        });
    }

    // Load and render wishlist products using Promise.all for parallel fetching
    function loadWishlistProducts() {
      let wishlist = JSON.parse(localStorage.getItem('wishlist') || '[]');

      if (wishlist.length === 0) {
        productGrid.innerHTML = `
        <li class="p-4 col-span-full font-semibold">
          No products in your wishlist.
          <span>
            <a href="/collections/all-products" class="text-blue-600 hover:underline ml-2">Let's shop now</a>
          </span>
        </li>
        `;
        return;
      }

      // Fetch product data using Promise.all for parallel fetching
      Promise.all(wishlist.map((handle) => fetchProductHTML(handle)))
        .then((productsHTML) => {
          productGrid.innerHTML = '';

          // Loop through fetched HTML and append product cards
          productsHTML.forEach((productHTML) => {
            if (productHTML) {
              const li = document.createElement('li');
              li.className = 'grid__item';
              li.innerHTML = productHTML;
              productGrid.appendChild(li);
            }
          });
          initializeQuickAddToCart();
          initWishlistEvents();
        })
        .catch((error) => {
          productGrid.innerHTML = `<li class="p-4 col-span-full text-red-600">Error loading wishlist products.</li>`;
          console.error(error);
        });
    }

    // Initialize wishlist toggle buttons
    function initWishlistEvents() {
      const wishlistKey = 'wishlist';

      function getWishlist() {
        const list = localStorage.getItem(wishlistKey);
        return list ? JSON.parse(list) : [];
      }

      function saveWishlist(list) {
        localStorage.setItem(wishlistKey, JSON.stringify(list));
      }

      function updateHeartIcon(imgEl, isAdded) {
        if (isAdded) {
          imgEl.src = window.wishlistIcons.filled;
        } else {
          imgEl.src = window.wishlistIcons.empty;
        }
      }

      document.querySelectorAll('.wishlist-toggle').forEach((link) => {
        const productHandle = link.getAttribute('data-product-handle');
        const img = link.querySelector('.heart-icon');
        const wishlist = getWishlist();
        const isInWishlist = wishlist.includes(productHandle);

        updateHeartIcon(img, isInWishlist);

        link.removeEventListener('click', handleClick);
        link.addEventListener('click', handleClick);

        function handleClick(e) {
          e.preventDefault();
          let wishlist = getWishlist();

          if (wishlist.includes(productHandle)) {
            wishlist = wishlist.filter((id) => id !== productHandle);
            updateHeartIcon(img, false);
          } else {
            wishlist.push(productHandle);
            updateHeartIcon(img, true);
          }

          saveWishlist(wishlist);

          loadWishlistProducts();
        }
      });
    }

    loadWishlistProducts();
  });
</script>
